#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <behaviors/rgbled_widget.dtsi>
#include <input/processors.dtsi>
#include <mouse-gesture.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10

#define DEFAULT 0
#define QWERTY 1
#define ARROW_NUM 2
#define SYMBOL 3
#define FUNCTION 4
#define MOUSE 5
#define SYSTEM 6

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&lt {
    flavor = "hold-preferred";
};

&sl {
    release-after-ms = <600>;
};

&mkp_input_listener {
    input-processors = <&zip_temp_layer MOUSE 2000>;
};

&zip_mouse_gesture {
    stroke-size = <1>;
    enable-eager-mode;
	movement-threshold = <1>;

    history_back {
        pattern = <GESTURE_RIGHT>;
        bindings = <&kp LA(LEFT)>;
    };

    history_forward {
        pattern = <GESTURE_LEFT>;
        bindings = <&kp LA(RIGHT)>;
    };

    close_tab {
        pattern = <GESTURE_DOWN GESTURE_RIGHT>;
        bindings = <&kp LC(W)>;
    };

    new_tab {
        pattern = <GESTURE_DOWN GESTURE_LEFT>;
        bindings = <&kp LC(T)>;
    };

    app_switcher {
        pattern = <GESTURE_DOWN GESTURE_UP>;
        bindings = <&kp UP>;
    };

    /*virtual_desktop_prev {
        pattern = <GESTURE_LEFT GESTURE_DOWN>;
        bindings = <&kp LG(LC(LEFT))>;
    };

    virtual_desktop_next {
        pattern = <GESTURE_RIGHT GESTURE_DOWN>;
        bindings = <&kp LG(LC(RIGHT))>;
    };*/

    // left {
    //     gesture = <GESTURE_LEFT>;
    //     bindings = <&kp LEFT>;
    // };
    // right {
    //     gesture = <GESTURE_RIGHT>;
    //     bindings = <&kp RIGHT>;
    // };
    // up {
    //     gesture = <GESTURE_UP>;
    //     bindings = <&kp UP>;
    // };
    // down {
    //     gesture = <GESTURE_DOWN>;
    //     bindings = <&kp DOWN>;
    // };
};

/ {

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <ARROW_NUM SYMBOL>;
            then-layer = <FUNCTION>;
        };
    };

    combos {    
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <80>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 3>;
            timeout-ms = <80>;
        };

        ctrl {
            bindings = <&qm LCTRL>;
            key-positions = <12 13>;
            timeout-ms = <50>;
            slow-release;
        };

        qwerty_on_off {
            bindings = <&tog QWERTY>;
            key-positions = <4 5>;
            timeout-ms = <80>;
            layers = <DEFAULT QWERTY>;
        };

        system_on_off {
            bindings = <&mo SYSTEM>;
            key-positions = <30 31 32>;
            timeout-ms = <80>;
        };
    };

    behaviors {
        com_excl: comma_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCL>;
            mods = <(MOD_LSFT)>;
        };
        dot_qmark: dot_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp QMARK>;
            mods = <(MOD_LSFT)>;
        };            
        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };
        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
        lt_ime_on: lt_ime_on {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&ime_on>;
        };
        lt_ime_off: lt_ime_off {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&ime_off>;
        };
    };

    macros {
        qmt: qwerty_mt {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_press &mo QWERTY>
                , <&macro_param_1to1>
                , <&macro_param_2to2>
                , <&macro_press &mt MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_param_2to2>
                , <&macro_release &mt MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
                , <&macro_release &mo QWERTY>
                ;
        };
        qm: qwerty_m {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_press &mo QWERTY>
                , <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_release &mo QWERTY>
                ;
        };
        /*kp_aml: kp_automosuelayer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release &kp MACRO_PLACEHOLDER>,
                <&macro_tap &sl MOUSE>;
        };*/
        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
        };
        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
        };
        ime_on: ime_on {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&kp LANG1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        ime_off: ime_off {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&kp LANG2 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
            &kp Q    &kp L    &kp U             &com_excl           &dot_qmark                                                 &kp F                    &kp W              &kp R    &kp Y    &kp P
            &kp E    &kp I    &kp_exit_AML A    &kp_exit_AML O                                                                 &kp K                    &kp T              &kp N    &kp S    &kp H
            &kp Z    &kp X    &kp C             &kp V                                                             &mouse_gesture    &kp G                    &kp D              &kp M    &kp J    &kp B
                              &kp LALT          &mt LSHIFT SPACE    &lt_ime_off ARROW_NUM F15    &qm LCTRL        &kp MINUS    &lt_ime_on SYMBOL F14    &qmt LGUI ENTER
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp LEFT RIGHT>;
        };

        QWERTY {
            bindings = <
            &kp Q           &kp W    &kp E     &kp R     &kp T                            &kp Y     &kp U     &kp I        &kp O      &kp P
            &mt LCTRL A     &kp S    &kp D     &kp F                                      &kp H     &kp J     &kp K        &kp L      &kp SEMI
            &mt LSHIFT Z    &kp X    &kp C     &kp V                             &kp G    &kp N     &kp M     &kp COMMA    &kp DOT    &kp SLASH
                                     &trans    &trans    &trans    &trans        &kp B    &trans    &trans
            >;
        };

        ARROW_NUM {
            bindings = <
            &kp PG_UP           &kp HOME     &kp UP       &kp END      &kp LC(Y)                                   &kp EQUAL    &kp N7    &kp N8    &kp N9    &kp COMMA
            &mt LCTRL PG_DN     &kp LEFT     &kp DOWN     &kp RIGHT                                                &kp BSPC     &kp N4    &kp N5    &kp N6    &kp DOT
            &mt LSHIFT LC(Z)    &kp LC(X)    &kp LC(C)    &kp LC(V)                               &kp SEMICOLON    &kp DEL      &kp N1    &kp N2    &kp N3    &kp N0
                                             &trans       &trans       &trans       &trans        &trans           &trans       &trans
            >;
        };

        SYMBOL {
            bindings = <
            &kp GRAVE    &kp AT       &kp HASH     &kp DLLR     &kp PRCNT                               &kp CARET    &kp AMPS     &kp ASTRK    &kp LPAR    &kp RPAR
            &kp TILDE    &kp SLASH    &kp UNDER    &kp MINUS                                            &kp BSPC     &kp SEMI     &kp COLON    &kp LBKT    &kp RBKT
            &kp PIPE     &kp BSLH     &kp LT       &kp GT                                  &kp K_APP    &kp DEL      &kp SQT      &kp DQT      &kp LBRC    &kp RBRC
                                      &trans       &trans       &trans       &trans        &trans       &trans       &trans
            >;
        };

        FUNCTION {
            bindings = <
            &kp LC(PG_UP)    &kp LC(HOME)    &kp LC(UP)      &kp LC(END)      &kp PAUSE_BREAK                                &kp C_MUTE      &kp F7    &kp F8    &kp F9    &kp F12
            &kp LC(PG_DN)    &kp LC(LEFT)    &kp LC(DOWN)    &kp LC(RIGHT)                                                   &kp LC(BSPC)    &kp F4    &kp F5    &kp F6    &kp F11
            &kp LSHIFT       &kp SLCK        &kp PSCRN       &kp INS                                           &trans        &kp LC(DEL)     &kp F1    &kp F2    &kp F3    &kp F10
                                             &trans          &trans           &trans             &trans        &trans        &trans          &trans
            >;

        };

        MOUSE {
            bindings = <
            &kp LC(W)        &kp LC(PG_UP)    &kp LC(PG_DN)   &kp LC(T)           &kp LC(R)                                         &trans              &trans             &trans    &trans    &trans
            &kp LS(LC(T))    &trans         &trans        &trans                                                              &trans              &trans             &trans    &trans    &trans
            &trans           &trans           &kp LA(LEFT)    &kp LA(RIGHT)                                             &trans      &trans              &trans             &trans    &trans    &trans
                                              &trans        &mkp MB3    &mkp MB1    &mkp MB2            &trans    &trans    &trans
            >;
        };

        SYSTEM {
            bindings = <
            &trans    &trans    &trans    &trans    &trans                                 &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4
            &trans    &trans    &trans    &trans                                           &trans          &ind_bat        &ind_con        &trans          &trans
            &trans    &trans    &trans    &trans                            &bootloader    &trans          &trans          &trans          &bt BT_CLR      &bt BT_CLR_ALL
                                &trans    &trans    &trans    &trans        &trans         &trans          &trans
            >;
        };
    };
};
