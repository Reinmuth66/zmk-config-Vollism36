#include "Vollism36.dtsi"
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define QWERTY 1
#define ARROW_NUM 2
#define SYMBOL 3
#define FUNCTION 4
#define MOUSE 5
#define SYSTEM 6


&default_transform {
    col-offset = <5>;
};

&kscan0 {
        col-gpios
            = <&xiao_d 4 GPIO_ACTIVE_HIGH>
            , <&xiao_d 5 GPIO_ACTIVE_HIGH>
            , <&xiao_d 6 GPIO_ACTIVE_HIGH>
            , <&gpio0 9 GPIO_ACTIVE_HIGH>
            , <&gpio0 10 GPIO_ACTIVE_HIGH>
            ;
};

&adc {
	status = "okay";
};

/ {
	anin0: analog_input_0 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;
		y-ch {
			io-channels = <&adc 0>; // <--- see ain-map.png for nRF52840
			mv-mid = <1590>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <1>;
			scale-divisor = <50>;
			#invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_Y>;
			#report-on-change-only;
		};
		x-ch {
			io-channels = <&adc 1>; // <--- see ain-map.png for nRF52840
			mv-mid = <1650>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <1>;
			scale-divisor = <50>;
			invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_X>;

			/* enable report mdoe for gamepad axix or knob */
			/* to only call input_report on quantquantized value is updated */
			/* NOTE: mouse input does NOT need this */
			#report-on-change-only;

		};
	};

	zip_keybind_keys0: zip_keybind_keys0 {
	        compatible = "zmk,input-processor-keybind";
	        #input-processor-cells = <0>;
		    track_remainders;
	        bindings = <&kp RIGHT>
	                 , <&kp LEFT>
	                 , <&kp UP>
	                 , <&kp DOWN>
                     ;
	        tick = <40>;
	        wait-ms = <0>;
	        tap-ms = <10>;
	        // mode = <0>
	        // threshold = <10>
	        // max_threshold = <200>
	        // max_pending_activations = <10>
    };
	zip_keybind_keys1: zip_keybind_keys1 {
	        compatible = "zmk,input-processor-keybind";
	        #input-processor-cells = <0>;
		    track_remainders;
	        bindings = <&kp N1>
	                 , <&kp N2>
	                 , <&kp N3>
	                 , <&kp N4>
                     ;
	        tick = <40>;
	        wait-ms = <0>;
	        tap-ms = <10>;
	        // mode = <0>
	        // threshold = <10>
	        // max_threshold = <200>
	        // max_pending_activations = <10>
	};

	analog_input_listener {
		status = "okay";
		compatible = "zmk,input-listener";
        device = <&anin0>;
		input-processors = <&zip_mouse_gesture>;
		symbol {
			layers = <SYMBOL>;
			input-processors = <&zip_keybind_keys1>;
			process-next;
		};
		symbol-prevent {
			layers = <SYMBOL>;
			input-processors = <&zip_xy_scaler 0 1>;
		};
		arrow_num {
			layers = <ARROW_NUM>;
			input-processors = <&zip_keybind_keys0>;
			process-next;
		};
		arrow_num-prevent {
			layers = <ARROW_NUM>;
			input-processors = <&zip_xy_scaler 0 1>;
		};
		default {
			layers = <DEFAULT>;
			input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>
							, <&zip_xy_scaler 1 50>
							, <&zip_xy_to_scroll_mapper>;
		};
	};

	trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball_split>;
        automouse {
                layers = <DEFAULT QWERTY>;
                input-processors = <&zip_temp_layer MOUSE 2000>;
                process-next;
        };
        scroll {
                layers = <ARROW_NUM>;
                input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>
                                 , <&zip_xy_scaler 1 30>
                                 , <&zip_xy_to_scroll_mapper>;
        };
    };
};

&zip_temp_layer {
    excluded-positions = <12 13 30 31 32>;
};

&trackball_listener {
    status = "okay";
};

&right_encoder {
    status = "okay";
};
